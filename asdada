#include <xc.h>
#include "main.h"
#include <stdio.h>
#include <stdlib.h>
#include <p33ep128gp502.h>



unsigned char contador;                 // contador preescaler (otro a parte del propio del oscilador)
unsigned char contador_1;               // contador para controlar el parpadeo de los LED
unsigned char flag_led=1;               // flag para cambiar el estado del LED

/***************************************************
 *           CONFIGURACIÓN OSCILADOR                *
*****************************************************/

void oscillator_config(void) {

    OSCCONbits.NOSC = 2;                // nueva configuración: primary oscillator
    while (OSCCONbits.COSC != 2){}      // mientras las configuración actual sea distinta de la especificada anteriormente 
    RCONbits.SWDTEN=0;                  // deshabilita el watch dog
}

/***************************************************
 *                     TIMER 2                       *
*****************************************************/

void timer_2_config(void){
    T2CONbits.TSIDL=0;                  // continuos mode operation
    T2CONbits.TCS=0;                    // selecciona clock interno
    
    T2CONbits.T32=0;                    // timer 2 de 16 bits 
    T2CONbits.TGATE=0;                  // no habilita entrada de pulsos externos al contador (los pulsos serán internos)
    T2CONbits.TCKPS=0;                  // prescaler (0==1:1)
                                        // con el TM2 a 0 sería (2^16)*1/10Mhz -> 6,55 ms
    TMR2 = 15535;                       // 65535 - 50000 (5 ms) 
    T2CONbits.TON=0;                    // timer activado

    IEC0bits.T2IE=1;                    // habilita interrupción timer 2
    IPC1bits.T2IP=7;                    // prioridad del timer 2 a nivel 7 (máxima) 
}

void __attribute__((__interrupt__,no_auto_psv)) _T2Interrupt(void){
    contador++;                 
    TMR2 = 15535;                         // 65535 - 50000 (5 ms) 
    IFS0bits.T2IF = 0;                    // pone a 0 el flag de la interrupción del timer 2
    if (contador >= 20)                   // 20 x 5 ms = 100 ms 
    {
        contador=0;
        contador_1++;                       
    }
}

/***************************************************
 *            RESETEAR INTERRUPCIONES                *
*****************************************************/

void clear_interrupt_flags (void){
    IFS0 = 0;
    IFS1 = 0;
    IFS2 = 0;
    IFS3 = 0;
    IFS4 = 0;
}
/***************************************************
 *               PROGRAMA PRINCIPAL                 *
*****************************************************/

int main(void){
    oscillator_config();
    clear_interrupt_flags();
    timer_2_config();
    
    ANSELB = 0;                             // puerto b digital
    ANSELA = 0;                             // puerto a digital

    TRISBbits.TRISB1=0;                     // puerto del LED como ouput
    TRISAbits.TRISA1=0;                     // puerto del LED como output

    PORTBbits.RB1=1;                        // escribe un 1 en el puerto (LED encendido)
    PORTAbits.RA1=0;                        // escribe un 0 en el puerto (LED apagado)

    while (1){
        if (contador_1>=10){                // cada 1 segundo se entra en la instrucción
            if (flag_led==1){
                PORTBbits.RB1=0;            // apaga led
                PORTAbits.RA1=1;            // eciende led
                contador_1=0;
                flag_led=0;
            }
            else{
                PORTBbits.RB1=1;            // enciende led
                PORTAbits.RA1=0;            // apaga led
                contador_1=0;
                flag_led=1;
            }

        }
   }
}
